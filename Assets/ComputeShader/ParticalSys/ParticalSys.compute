// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct particalData {
    float3 pos;
    float4 color;
};

float time;

RWStructuredBuffer<particalData> particalBuffer;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
// RWTexture2D<float4> Result;

[numthreads(10, 10, 10)]
void CSMain(uint3 gid : SV_GROUPID, uint index : SV_GROUPINDEX) {
    // TODO: insert actual code here!
    int pindex = gid.x * 1000 + index;

    particalBuffer[pindex].pos = float3(pindex / 1000.0 + sin(time), 5 * cos(pindex), 5 * sin(pindex));
    particalBuffer[pindex].color = float4((sin(time) + 1) * 0.5, (cos(time) + 1) * 0.5, abs(cos(time) + sin(time)), 1);

    // Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);

}