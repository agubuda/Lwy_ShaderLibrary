// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct cacheData
{
    float3 prevPosWS;
    float3 velocityWS;
    float3 dPoseWS;
};


float4x4 _LocalToWorld;

uint vertCount;
float _MoveScale;
float _Spring;
float _Damper;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
// RWTexture2D<float4> Result;
// RWStructuredBuffer<float3> Result;
RWStructuredBuffer<float3> _pos;
RWStructuredBuffer<cacheData> data;


[numthreads(128, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x > vertCount)
    {
        return;
    }
    // int index = id.x;

    // TODO: insert actual code here!
        
    _pos[id.x] = mul(_LocalToWorld, float4(_pos[id.x], 1.0)).xyz;
    float3 dPoseWSTemp = (_pos[id.x] - data[id.x].prevPosWS).xyz;
    float3 forceWS = _Spring * dPoseWSTemp - data[id.x].velocityWS * _Damper;

    float dt = 1.0 / 60;
    data[id.x].velocityWS += forceWS * dt;
    data[id.x].prevPosWS.xyz += data[id.x].velocityWS * dt;
    data[id.x].dPoseWS  = (data[id.x].prevPosWS - _pos[id.x]) * _MoveScale;

    float move = length(data[id.x].dPoseWS);
    data[id.x].dPoseWS  = min(move, 1.0) / max(move, 0.01) * data[id.x].dPoseWS;
    
    //targetPositionWS += dPoseWS;
    _pos[id.x] += data[id.x].dPoseWS;

    //cache data[id.x] from last frame.
    data[id.x] = data[id.x];
}

// Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
// }
